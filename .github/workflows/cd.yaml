name: CD

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_bindings:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: windows-latest
            target: x86_64-pc-windows-msvc

          - host: windows-latest
            target: i686-pc-windows-msvc

          - host: windows-latest
            target: aarch64-pc-windows-msvc
            setup_command: |
              rustup target add aarch64-pc-windows-msvc

          - host: macos-latest
            target: x86_64-apple-darwin
            strip_binary_path: strip
            strip_binary_args: +x

          - host: macos-latest
            target: aarch64-apple-darwin
            strip_binary_path: strip
            strip_binary_args: +x
            setup_command: |
              rustup target add aarch64-apple-darwin;
              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
              export CC=$(xcrun -f clang);
              export CXX=$(xcrun -f clang++);
              SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
              export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";

          - host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            strip_binary_path: arm-linux-gnueabihf-strip
            setup_command: |
              sudo apt-get update &&
              sudo apt-get install -y gcc-arm-linux-gnueabihf &&
              sudo apt-get clean &&
              sudo rm -rf /var/lib/apt/lists/*

          - host: ubuntu-latest
            target: aarch64-linux-android
            strip_binary_path: ${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip *.node
            setup_command: |
              rustup target add aarch64-linux-android

          - host: ubuntu-latest
            target: armv7-linux-androideabi
            strip_binary_path: ${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip
            setup_command: |
              rustup target add armv7-linux-androideabi

          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            strip_binary_path: aarch64-unknown-linux-gnu-strip

          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            strip_binary_path: strip

          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            strip_binary_path: strip

          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            strip_binary_path: /aarch64-linux-musl-cross/bin/aarch64-linux-musl-strip
            setup_command: |
              rustup target add aarch64-unknown-linux-musl

    runs-on: ${{ matrix.settings.host }}

    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable

      - uses: actions/setup-node@v4
        with:
          node-version-file: package.json

      - uses: pnpm/action-setup@v3
        with:
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "PNPM_STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.PNPM_STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-cargo-store-${{ hashFiles('**/Cargo.lock') }}

      - name: Install pnpm dependencies
        run: pnpm install

      # BEGIN OS SPECIFIC STEPS

      - name: "[Non-Docker] Build native module"
        if: ${{ !matrix.settings.docker }}
        run: |
          sh -c "${{ matrix.settings.setup_command }}" &&
          pnpm run build-native -- --target ${{ matrix.settings.target }} &&
          chmod +x ./scripts/strip-symbols.sh &&
          ./scripts/strip-symbols.sh ${{ matrix.settings.strip_binary_path }} ${{ matrix.settings.strip_binary_args }}

      - name: "[Docker] Build native module"
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: "--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build"
          run: |
            set -e &&
            sh -c "${{ matrix.settings.setup_command }}" &&
            pnpm run build-native -- --target ${{ matrix.settings.target }} &&
            chmod +x ./scripts/strip-symbols.sh &&
            ./scripts/strip-symbols.sh ${{ matrix.settings.strip_binary_path }} ${{ matrix.settings.strip_binary_args }}

      # END OS SPECIFIC STEPS

      - name: Upload binding artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: |
            ./packages/**/*.node
            !**/node_modules/**/*.node
          if-no-files-found: error
